<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About_Altimetry_P1" xml:space="preserve">
    <value>A marathon course is unique for several reasons including altimetry.</value>
  </data>
  <data name="About_Altimetry_P2" xml:space="preserve">
    <value>That means we can create an elevation profile of our marathon classifying each mile and adding or removing some seconds to our goal pace as shown below:</value>
  </data>
  <data name="About_Altimetry_P3" xml:space="preserve">
    <value>Downhill = 10 seconds faster per mile</value>
  </data>
  <data name="About_Altimetry_P4" xml:space="preserve">
    <value>Flat = keep goal pace</value>
  </data>
  <data name="About_Altimetry_P5" xml:space="preserve">
    <value>Uphill = 10 seconds slower per mile</value>
  </data>
  <data name="About_Altimetry_Title" xml:space="preserve">
    <value>Step One: Course Altimetry</value>
  </data>
  <data name="About_Approach_P1" xml:space="preserve">
    <value> — Given your goal pace of, say 9:00/miles, you purposely start of slower by about 15 seconds per mile. Then you start to bring the pace down such that by mile five, you are running at or just under your goal pace. It sounds crazy, for sure, but it means you aren't running too hard, or wasting energy trying to weave around the competition. You are just in your zone, slowly building up your pace to where you'll want it to sit all day.</value>
  </data>
  <data name="About_Approach_P1_Title" xml:space="preserve">
    <value>Start Smart (Miles 0 to 5)</value>
  </data>
  <data name="About_Approach_P2" xml:space="preserve">
    <value> — The bulk of your race is spent running just under our goal pace. For our 9:00 runner, this means miles in the 8:55 range. The purpose here is to be consistent but to slowly chip away at the timing surplus that our early conservative pacing created. By the time we reach the end of this section of our day, you should be right on target for your goal time but in a much better place.</value>
  </data>
  <data name="About_Approach_P2_Title" xml:space="preserve">
    <value>Run to the Line (Miles 6 to 20)</value>
  </data>
  <data name="About_Approach_P3" xml:space="preserve">
    <value>The Line (Aka the “wall”) is the part of your race day where your body begins to push back. In general this happens between miles 18 and 22 on race day, depending on the course, your pacing, your fitness, etc. Of course, most runners go out fast putting time in to “the bank” for when they slow down — I am here to tell you there is no such bank, and that time you saved will mostly likely be nowhere near sufficient to staunch the bleeding at the end of your day.</value>
  </data>
  <data name="About_Approach_P4" xml:space="preserve">
    <value>Until you hit the “line” you aren’t racing, you are running. You ignore the other runners and do your best to flatten out the course through smart pacing. Nutritionally you are fueling in anticipation of the last six miles.</value>
  </data>
  <data name="About_Approach_P5" xml:space="preserve">
    <value>The last six miles on race day are were dreams are made (or broken). Inside Marathon Nation we don’t dread the end of the race; it’s where our day begins. If you have paced yourself properly, you’ll just be starting to pass other runners as everyone around you is slowing down. This is not only a judicious application of your fitness, it’s a powerful mental strategy that helps you stay focused just as your body is trying to check out.</value>
  </data>
  <data name="About_Approach_P5_Title" xml:space="preserve">
    <value>Race to the Finish (Miles 21 to Finish)</value>
  </data>
  <data name="About_Approach_P6" xml:space="preserve">
    <value>In summary, the basic Marathon Nation Pacing approach is:</value>
  </data>
  <data name="About_Approach_P7" xml:space="preserve">
    <value>Give away 15 seconds per mile for first six miles.</value>
  </data>
  <data name="About_Approach_P8" xml:space="preserve">
    <value>Gain back 5 seconds per mile from miles 6 through 20.</value>
  </data>
  <data name="About_Approach_P9" xml:space="preserve">
    <value>Last 10k is on pace.</value>
  </data>
  <data name="About_Approach_Title" xml:space="preserve">
    <value>Step Two: The Marathon Nation Race Approach</value>
  </data>
  <data name="About_P1" xml:space="preserve">
    <value>The purpose of this web site is help people to run a smart marathon following a race strategy based on course altimetry and running negative splits allowing save energy for last miles where most of marathoners slowed significantly.</value>
  </data>
  <data name="About_P2" xml:space="preserve">
    <value>Having said that let's describe the steps followed to calculate your splits for a smart marathon:</value>
  </data>
  <data name="About_Title" xml:space="preserve">
    <value>ABOUT SMART MARATHON</value>
  </data>
  <data name="ContactMe_P1" xml:space="preserve">
    <value>Contact me for any comment or question you could have or request to add a marathon elevation profile in the list.</value>
  </data>
  <data name="ContactMe_P2" xml:space="preserve">
    <value>Also any experience running your marathons guided by Smart Marathon is welcome to be included in a future section.</value>
  </data>
  <data name="ContactMe_P3" xml:space="preserve">
    <value>If you find helpful this site please feel free to make any donation and contribute to pay hosting charges, make improvements and develop future sections:</value>
  </data>
  <data name="ContactMe_Title" xml:space="preserve">
    <value>CONTACT ME</value>
  </data>
  <data name="Distance_10K" xml:space="preserve">
    <value>10K</value>
  </data>
  <data name="Distance_30K" xml:space="preserve">
    <value>30K</value>
  </data>
  <data name="Distance_5K" xml:space="preserve">
    <value>5K</value>
  </data>
  <data name="Distance_HalfMarathon" xml:space="preserve">
    <value>Half Marathon</value>
  </data>
  <data name="Distance_Marathon" xml:space="preserve">
    <value>Marathon</value>
  </data>
  <data name="Distance_Other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="Label_Calculate" xml:space="preserve">
    <value>CALCULATE</value>
  </data>
  <data name="Label_Distance" xml:space="preserve">
    <value>DISTANCE</value>
  </data>
  <data name="Label_Event" xml:space="preserve">
    <value>EVENT</value>
  </data>
  <data name="Label_FinishTime" xml:space="preserve">
    <value>FINISH TIME</value>
  </data>
  <data name="Label_GoalTime" xml:space="preserve">
    <value>GOAL TIME</value>
  </data>
  <data name="Label_Instructions" xml:space="preserve">
    <value>Fill your goal time and classify each split according race altimetry</value>
  </data>
  <data name="Label_RealDistance" xml:space="preserve">
    <value>YOUR DISTANCE</value>
  </data>
  <data name="Label_Pace" xml:space="preserve">
    <value>PACE</value>
  </data>
  <data name="Label_GoalPace" xml:space="preserve">
    <value>GOAL PACE</value>
  </data>
  <data name="Label_Time" xml:space="preserve">
    <value>TIME</value>
  </data>
</root>